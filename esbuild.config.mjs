import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { watch } from "node:fs/promises";
import fs from "node:fs";
import path from "node:path";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const config = {
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	plugins: [
		{
			name: "rebuild-notify",
			setup(build) {
				build.onEnd((result) => {
					console.log(
						`build ended with ${result.errors.length} errors`
					);

					for (const file of [
						"manifest.json",
						"main.js",
						"styles.css",
					]) {
						copyToPluginFolder(file);
					}
				});
			},
		},
	],
};

const context = await esbuild.context(config);

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.rebuild();
}

async function copyToPluginFolder(file) {
	const pluginFolder = path.join(
		process.env.PLUGIN_FOLDER,
		".obsidian/plugins/my-obsidian-plugin"
	);

	const destinationPath = path.join(pluginFolder, file);

	// Create the destination folder if it doesn't exist
	if (!fs.existsSync(pluginFolder)) {
		fs.mkdirSync(pluginFolder, { recursive: true });
	}
	fs.copyFile(file, destinationPath, fs.constants.COPYFILE_FICLONE, () =>
		console.log(`copy ${file} to ${destinationPath}}`)
	);

	try {
		const watcher = watch(file);
		for await (const event of watcher) {
			fs.copyFile(
				event.filename,
				destinationPath,
				fs.constants.COPYFILE_FICLONE,
				() => console.log(`copy ${file} to ${destinationPath}}`)
			);
		}
	} catch (err) {
		if (err.name === "AbortError") return;
		throw err;
	}
}
